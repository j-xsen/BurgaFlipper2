/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 burger.glb -t -T 
Files: burger.glb [8.03KB] > Z:\coding\BurgaFlippa2\public\burger-transformed.glb [1.55KB] (81%)
*/

import * as THREE from 'three'
import {useGLTF} from '@react-three/drei'
import type {ObjectMap} from "@react-three/fiber";
import type {GLTF} from "three-stdlib";
import {animated, useSpring} from "@react-spring/three";
import {memo, useState} from "react";
import {Root, Text} from "@react-three/uikit";
import {BunTop} from "./BunTop.tsx";
import { BunBottom } from './BunBottom.tsx';

type GLTFResult = GLTF & ObjectMap & {
    nodes: {
        Cylinder: THREE.Mesh
    }
    materials: {
        ['Material.001']: THREE.MeshBasicMaterial
    }
}

export type BurgaProps = {
    position: [number, number, number],
    handleClick: () => void,
    page: 'home' | 'game'
}

const duration = 125;

function BurgaModel(props: BurgaProps) {
    const [springs, api] = useSpring(() => ({
        position: [props.position[0], props.position[1], props.position[2]] as [number, number, number],
        rotation: [0, 0, 0] as [number, number, number],
        bunScale: (props.page==="home"?[1, 1, 1]:[0,0,0]) as [number, number, number],
        scale: [1, props.page === "home" ? 5 : 1, 0.75] as [number, number, number],
        config: {mass: 0.05, tension: 170, friction: 26}
    }), [props.position])

    const [bunVisible, setBunVisible] = useState(true)

    const {nodes, materials} = useGLTF('/burger-transformed.glb') as GLTFResult
    materials["Material.001"].color.set("brown")

    const handleClick = () => {
        props.handleClick()
        if (props.page === "game") {
            api.start({
                position: [props.position[0], props.position[1] + 2, props.position[2]],
                rotation: [0, 0, Math.PI / 2],
                scale:[0.5,1,1],
                config: {duration: duration},
                onRest: () => {
                    api.start({
                        position: [props.position[0], props.position[1], props.position[2]],
                        rotation: [0, 0, Math.PI],
                        scale:[1,1,0.75],
                        config: {duration: duration},
                        onRest: () => {
                            api.start({
                                rotation: [0, 0, 0],
                                config: {duration: 0},
                                onRest: () => {if(bunVisible)setBunVisible(false)}
                            })
                        }
                    })
                }
            })
        }
    }

    return (
        <animated.group onClick={handleClick} dispose={null} {...props}
                        rotation={springs.rotation.to((x, y, z) => [x, y, z]) as unknown as [number, number, number]}
                        position={springs.position}>
            <animated.group visible={bunVisible} scale={springs.bunScale}>
                <BunTop/>
                <BunBottom/>
            </animated.group>
            {props.page === "home" && (
                <>
                    <Root width={"100%"} transformTranslateZ={50} transformTranslateY={-2}>
                        <Text textAlign={"center"} color={"white"} fontSize={50} fontWeight={"bold"}>PLAY</Text>
                    </Root>
                </>
            )}
            <animated.mesh geometry={nodes.Cylinder.geometry} scale={springs.scale}
                           material={materials['Material.001']}/>
        </animated.group>
    )
}

export default memo(BurgaModel)

useGLTF.preload('/burger-transformed.glb')
