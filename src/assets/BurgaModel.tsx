/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 burger.glb -t -T 
Files: burger.glb [8.03KB] > Z:\coding\BurgaFlippa2\public\burger-transformed.glb [1.55KB] (81%)
*/

import * as THREE from 'three'
import {useGLTF} from '@react-three/drei'
import type {ObjectMap} from "@react-three/fiber";
import type {GLTF} from "three-stdlib";
import {animated, useSpring} from "@react-spring/three";
import {memo} from "react";

type GLTFResult = GLTF & ObjectMap & {
    nodes: {
        Cylinder: THREE.Mesh
    }
    materials: {
        ['Material.001']: THREE.MeshToonMaterial
    }
}

export type BurgaProps = {
    position: [number, number, number],
    scale: number,
    handleClick: () => void
}

const duration = 150;

function BurgaModel(props: BurgaProps) {
    const [springs, api] = useSpring(() => ({
        position: [props.position[0], props.position[1], props.position[2]],
        rotation: [0, 0, 0],
        config: {mass: 0.05, tension: 170, friction: 26}
    }), [props.position])

    const {nodes, materials} = useGLTF('/burger-transformed.glb') as GLTFResult

    const handleClick = () => {
        props.handleClick()
        api.start({
            position: [props.position[0], props.position[1] + 2, props.position[2]],
            rotation: [0, 0, Math.PI / 2],
            config: {duration: duration},
            onRest: () => {
                api.start({
                    position: [props.position[0], props.position[1], props.position[2]],
                    rotation: [0, 0, Math.PI],
                    config: {duration: duration},
                    onRest: () => {
                        api.start({
                            rotation: [0, 0, 0],
                            config: {duration: 0}
                        })
                    }
                })
            }
        })
    }

    return (
        <animated.group onClick={handleClick} dispose={null} {...props}
                        rotation={springs.rotation.to((x, y, z) => [x, y, z])}
                        position={springs.position.to((x, y, z) => [x, y, z])} scale={props.scale}>
            <mesh geometry={nodes.Cylinder.geometry} material={materials['Material.001']}/>
        </animated.group>
    )
}

export default memo(BurgaModel)

useGLTF.preload('/burger-transformed.glb')
